package me.skyler.Kits;

import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.Effect;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.World;
import org.bukkit.command.Command;
import org.bukkit.command.CommandSender;
import org.bukkit.configuration.ConfigurationSection;
import org.bukkit.enchantments.Enchantment;
import org.bukkit.entity.Arrow;
import org.bukkit.entity.Egg;
import org.bukkit.entity.Player;
import org.bukkit.entity.Snowball;
import org.bukkit.entity.WitherSkull;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.block.Action;
import org.bukkit.event.entity.EntityDamageByEntityEvent;
import org.bukkit.event.entity.HorseJumpEvent;
import org.bukkit.event.entity.ProjectileHitEvent;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.player.PlayerCommandPreprocessEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerRespawnEvent;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.PlayerInventory;
import org.bukkit.inventory.meta.ItemMeta;
import org.bukkit.plugin.java.JavaPlugin;
import org.bukkit.potion.PotionEffect;
import org.bukkit.potion.PotionEffectType;

public class Main extends JavaPlugin implements Listener  {

	// OnEnable And OnDisable

	public void onDisable() {

	}

	public void onEnable() {
		Bukkit.getServer().getPluginManager().registerEvents(this, this);
		getConfig().options().copyDefaults(true);
		saveConfig();
	}

	// Events -------------------------------------------------------------------------

	
	
	@EventHandler
	public void onGun(PlayerInteractEvent e) { // testing guns
		Player p = e.getPlayer();
		if (e.getAction() == Action.RIGHT_CLICK_AIR || e.getAction() == Action.RIGHT_CLICK_BLOCK) {
			if (p.getInventory().getItemInHand().getType() == Material.IRON_HOE) {
				p.launchProjectile(WitherSkull.class);
			}
		}
	}
	
	@EventHandler
	public void onProjHitsb(ProjectileHitEvent e) { // testing Snowball reaction
			Snowball sb = (Snowball) e.getEntity();
			Location loc = sb.getLocation();
			if(e.getEntity().equals(sb)){
			loc.getBlock().setType(Material.AIR);
		}
	}
	
	@EventHandler
	public void onPlayerInteract(PlayerInteractEvent e) { // testing guns
		Player p = e.getPlayer();
		if (e.getAction() == Action.RIGHT_CLICK_AIR || e.getAction() == Action.RIGHT_CLICK_BLOCK) {
			if (p.getInventory().getItemInHand().getType() == Material.WOOD_HOE) {
				p.launchProjectile(Snowball.class);
			}
		}
	}

	@EventHandler
	public void onProjHitSnow(EntityDamageByEntityEvent e) { // snowball damage
		if(e.getDamager() instanceof Snowball && e.getEntity() instanceof Player){
			e.setDamage(e.getDamage() + 10);
		}
	}

	@EventHandler
	public void onPreprocess(PlayerCommandPreprocessEvent e) {
		ConfigurationSection s = getConfig().getConfigurationSection("commands");
		// Loop through all the commands.
		for (String command : s.getKeys(false)) {
			// If the command equals the message. We need to specify "/" because that isn't in our config.
			if (e.getMessage().equalsIgnoreCase("/" + command)) {
				e.getPlayer().sendMessage(ChatColor.translateAlternateColorCodes('&', getConfig().getString("commands." + command)));
				// Cancelling the event avoids the "Unknown Command" message.
				e.setCancelled(true);
			}
		}

		// If the section doesn't contain the message sent, we don't want to cancel. Otherwise, the command won't go through.
		if (!s.getKeys(false).contains(e.getMessage().replace("/", "")))
			e.setCancelled(false);
	}

	@EventHandler
	public void onProjHitEgg(ProjectileHitEvent e) { // testing Expolding Entity's
		if(e.getEntity() instanceof Egg){
			Egg egg = (Egg) e.getEntity();
			Location loc = egg.getLocation();
			World world = egg.getWorld();
			double x = loc.getX();
			double y = loc.getY();
			double z = loc.getZ();

			world.createExplosion(x, y, z, 0, true, true);
			world.playEffect(loc, Effect.RECORD_PLAY, 5);
		}
	}

	@EventHandler
	public void onHorseJump(HorseJumpEvent e){ // Cancels Horse Jump
		e.setCancelled(true);
	}

	@EventHandler
	public void onPHE(ProjectileHitEvent e){ // testing Entity Explosion
		if(e.getEntity() instanceof Arrow){
			Arrow arrow = (Arrow) e.getEntity();
			Location loc = arrow.getLocation();
			World world = arrow.getWorld();
			double x = loc.getX();
			double y = loc.getY();
			double z = loc.getZ();

			world.createExplosion(x, y, z, 0, false, false);
		}
	}

	@EventHandler
	public void onPlayerRespawn(PlayerRespawnEvent e){ // Respawn Event
		e.getPlayer().sendMessage(ChatColor.GOLD + "Respawned!");
	}

	// GUI Testing --------------------------------------------------------------------

	private void openGUI(Player player) { // Testing GUI's
		Inventory inv = Bukkit.createInventory(null, 9, ChatColor.DARK_AQUA + "Diamonds!!");

		ItemStack s = new ItemStack(Material.DIAMOND);
		ItemMeta sMeta = s.getItemMeta();

		sMeta.setDisplayName(ChatColor.AQUA + "Get Diamonds!");
		s.setItemMeta(sMeta);

		inv.setItem(4, s);

		player.openInventory(inv);
	}

	@EventHandler 
	public void onInventoryClick(InventoryClickEvent e){ // Testing GUI's
		if(!ChatColor.stripColor(e.getInventory().getName()).equalsIgnoreCase("Diamonds!!"))
			return;
		Player p = (Player) e.getWhoClicked();
		e.setCancelled(true);

		if(e.getCurrentItem()==null 
				|| e.getCurrentItem().getType()==Material.AIR
				|| !e.getCurrentItem().hasItemMeta()){
			p.closeInventory();
			return;
		}
		switch(e.getCurrentItem().getType()) {
		case DIAMOND:
			p.closeInventory();
			p.getInventory().clear();
			p.getInventory().addItem(new ItemStack(Material.DIAMOND, 10000));
			p.sendMessage(ChatColor.AQUA + "Diamonds To You!");
			break;
		default:
			p.closeInventory();
		}
	}

	@EventHandler
	public void onPlayerInteract1(PlayerInteractEvent e) { // testing GUI's
		Action a = e.getAction();
		ItemStack is = e.getItem();

		if(a == Action.PHYSICAL || is== null || is.getType() == Material.AIR)
			return;

		if(is.getType() == Material.COMPASS)openGUI(e.getPlayer());
	}

	// Commands -----------------------------------------------------------------------

	public boolean onCommand(CommandSender sender, Command cmd, String label, String[] args) { // kits

		if(label.equalsIgnoreCase("motd")){
			if(args.length == 0){
				Player p = (Player) sender;
				p.sendMessage(ChatColor.translateAlternateColorCodes('&', getConfig().getString("motd")));
			}else{
				Player p = (Player) sender;
				p.sendMessage(ChatColor.RED + args[0] + ChatColor.DARK_RED + " Is A Invaild Arguement");
			}
		}
			if(label.equalsIgnoreCase("?")){
				Player p = (Player) sender;
				if(args.length == 0){
					p.sendMessage(ChatColor.RED + "Invaild Operation!");
			}else{
				p.sendMessage("Invaild Operation!");
			}
			}

			if(label.equalsIgnoreCase("kit")) {
				Player p = (Player) sender;
				if(args.length == 0){
					p.sendMessage(ChatColor.GOLD + "Avaliable Kits:" + ChatColor.AQUA + " Archer, SwordMan, Tank, And Bomber.");
					return true;
				}
			}
			if(args[0].equalsIgnoreCase("clear")){
				Player p = (Player) sender;
				PlayerInventory pi = p.getInventory();
				p.removePotionEffect(PotionEffectType.JUMP);
				p.removePotionEffect(PotionEffectType.REGENERATION);
				p.removePotionEffect(PotionEffectType.SPEED);
				p.removePotionEffect(PotionEffectType.SLOW);
				p.removePotionEffect(PotionEffectType.WITHER);
				pi.clear();
			}
			if(args[0].equalsIgnoreCase("archer")){
				Player p = (Player) sender;
				PlayerInventory pi = p.getInventory();
				ItemStack bow = new ItemStack(Material.BOW, 1);
				ItemMeta bowmeta = bow.getItemMeta();
				ItemStack arrow = new ItemStack(Material.ARROW, 1);
				ItemMeta arrowmeta = arrow.getItemMeta();
				if(args.length == 1){
					pi.clear();
					///////////////////////////////////////////////
					p.removePotionEffect(PotionEffectType.JUMP);
					p.removePotionEffect(PotionEffectType.REGENERATION);
					p.removePotionEffect(PotionEffectType.SPEED);
					p.removePotionEffect(PotionEffectType.SLOW);
					p.removePotionEffect(PotionEffectType.WITHER);
					p.sendMessage(ChatColor.GOLD + "You've Been Given Kit " + ChatColor.AQUA + "Archer" + ChatColor.GOLD + ".");
					p.addPotionEffect(new PotionEffect(PotionEffectType.SLOW, Integer.MAX_VALUE, 0));
					///////////////////////////////////////////////
					bowmeta.setDisplayName(ChatColor.GOLD + "Da Bow");
					bow.setItemMeta(bowmeta);
					bow.addEnchantment(Enchantment.ARROW_INFINITE, 1);
					arrow.addUnsafeEnchantment(Enchantment.ARROW_FIRE, 1);
					arrowmeta.setDisplayName(ChatColor.GOLD + "Da Arrow");
					arrow.setItemMeta(arrowmeta);
					pi.addItem(bow);
					pi.addItem(arrow);
					return true;
				}
			}
			if(args[0].equalsIgnoreCase("swordman")){
				ItemStack isword = new ItemStack(Material.IRON_SWORD, 1);
				ItemMeta iswordmeta = isword.getItemMeta();
				Player p = (Player) sender;
				PlayerInventory pi = p.getInventory();
				if(args.length == 1){
					pi.clear();
					p.removePotionEffect(PotionEffectType.JUMP);
					p.removePotionEffect(PotionEffectType.SPEED);
					p.removePotionEffect(PotionEffectType.REGENERATION);
					p.removePotionEffect(PotionEffectType.SLOW);
					p.sendMessage(ChatColor.GOLD + "You've Been Given Kit " + ChatColor.AQUA + "SwordMan" + ChatColor.GOLD + ".");
					p.addPotionEffect(new PotionEffect(PotionEffectType.SPEED, Integer.MAX_VALUE, 1));
					iswordmeta.setDisplayName(ChatColor.GREEN + "Destinys Sword.");
					isword.setItemMeta(iswordmeta);
					isword.addUnsafeEnchantment(Enchantment.KNOCKBACK, 2);
					pi.addItem(isword);
				} else {
					p.sendMessage(ChatColor.RED + "Error.");
					return true;
				}
			}
			
			if(args[0].equalsIgnoreCase("tank")){
				ItemStack iaxe = new ItemStack(Material.IRON_AXE, 1);
				ItemMeta iaxemeta = iaxe.getItemMeta();
				Player p = (Player) sender;
				PlayerInventory pi = p.getInventory();
				if(args.length == 1){
					pi.clear();
					p.removePotionEffect(PotionEffectType.JUMP);
					p.removePotionEffect(PotionEffectType.SPEED);
					p.removePotionEffect(PotionEffectType.SLOW);
					p.removePotionEffect(PotionEffectType.WITHER);
					p.removePotionEffect(PotionEffectType.REGENERATION);
					p.sendMessage(ChatColor.GOLD + "You've Been Given Kit " + ChatColor.AQUA + "Tank" + ChatColor.GOLD + ".");
					p.addPotionEffect(new PotionEffect(PotionEffectType.JUMP, Integer.MAX_VALUE, 1));
					iaxemeta.setDisplayName(ChatColor.AQUA + "The Axe.");
					iaxe.setItemMeta(iaxemeta);
					iaxe.addUnsafeEnchantment(Enchantment.FIRE_ASPECT, 1);
					pi.addItem(iaxe);
				} else {
					p.sendMessage(ChatColor.RED + "Error.");
				}
			}
			
			if(args[0].equalsIgnoreCase("bomber")){
				ItemStack bomb = new ItemStack(Material.EGG, 2);
				ItemMeta eggmeta = bomb.getItemMeta();
				Player p = (Player) sender;
				PlayerInventory pi = p.getInventory();
				ItemStack gun = new ItemStack(Material.WOOD_HOE);
				ItemMeta gunmeta = gun.getItemMeta();
				if(args.length == 1){
					pi.clear();
					p.removePotionEffect(PotionEffectType.JUMP);
					p.removePotionEffect(PotionEffectType.SPEED);
					p.removePotionEffect(PotionEffectType.SLOW);
					p.removePotionEffect(PotionEffectType.REGENERATION);
					p.sendMessage(ChatColor.GOLD + "You've Been Given Kit " + ChatColor.AQUA + "Bomber" + ChatColor.GOLD + ".");
					p.addPotionEffect(new PotionEffect(PotionEffectType.REGENERATION, Integer.MAX_VALUE, 1));
					gunmeta.setDisplayName(ChatColor.RED + "Gun");
					gun.setItemMeta(gunmeta);
					eggmeta.setDisplayName(ChatColor.RED + "A Bomb.");
					bomb.setItemMeta(eggmeta);
					pi.addItem(bomb);
					pi.addItem(gun);
				} else {
					p.sendMessage(ChatColor.RED + "Error.");
				}
			}
			if(!(args[0].equalsIgnoreCase("bomber") || (args[0].equalsIgnoreCase("tank") || (args[0].equalsIgnoreCase("archer") 
					|| (args[0].equalsIgnoreCase("swordman") ||
							(args[0].equalsIgnoreCase("clear"))))))) {
				Player p = (Player) sender;
				p.sendMessage(ChatColor.RED + "Invaild Kit! " + ChatColor.AQUA + "Avalible Kits:  Archer, SwordMan, Tank, And Bomber.");
			}
		return false;
	}
}